<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--
            Filter Chain定义说明
            1、一个URL可以配置多个Filter，使用逗号分隔
            2、当设置多个过滤器时，全部验证通过，才视为通过
            3、部分过滤器可指定参数，如perms，roles
            认证过滤	anon，authcBasic，auchc，user
            anon:		例子/admins/**=anon 没有参数，表示可以匿名使用。
            authcBasic：	例如/admins/user/**=authcBasic没有参数表示httpBasic认证
            authc:		例如/admins/user/**=authc表示需要认证才能使用，没有参数
            user:		例如/admins/user/**=user没有参数表示必须存在用户，当登入操作时不做检查

            授权过滤	perms，roles，ssl，rest，port
            perms：	例子/admins/user/**=perms[user:add:*],perms参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，例如/admins/user/**=perms["user:add:*,user:modify:*"]，当有多个参数时必须每个参数都通过才通过，想当于isPermitedAll()方法。
            roles：	例子/admins/user/**=roles[admin],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，当有多个参数时，例如/admins/user/**=roles["admin,guest"],每个参数通过才算通过，相当于hasAllRoles()方法。
            ssl:	例子/admins/user/**=ssl没有参数，表示安全的url请求，协议为https
            rest:	例子/admins/user/**=rest[user],根据请求的方法，相当于/admins/user/**=perms[user:method] ,其中method为post，get，delete等。
            port：	例子/admins/user/**=port[8081],当请求的url的端口不是8081是跳转到schemal://serverName:8081?queryString,其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString是你访问的url里的？后面的参数。
        -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        <property name="loginUrl" value="/login.jsp" />
        <property name="successUrl" value="/admin/common/main.jhtml" />
        <property name="unauthorizedUrl" value="/admin/common/unauthorized.jhtml" />
        <property name="filterChainDefinitions">
            <value>
                /** = anon
            </value>
        </property>
        <property name="filters">
            <map>
                <entry key="authc" value-ref="authenticationFilter" />
            </map>
        </property>
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="authenticationRealm" />
        <property name="cacheManager" ref="cacheManager" />
        <property name="rememberMeManager" ref="rememberMeManager" />
        <property name="sessionManager" ref="sessionManager" />
    </bean>

    <bean id="authenticationRealm" class="top.zz.AuthenticationRealm">
        <property name="authorizationCacheName" value="authorization" />
        <property name="credentialsMatcher" ref="credentialsMatcher" />
    </bean>


    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cookie" ref="rememberMeCookie" />
    </bean>

    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg index="0" value="rememberMe" />
        <property name="maxAge" value="259200" />  <!-- 30 天 -->
    </bean>


    <bean id="authenticationFilter" class="top.zz.AuthenticationFilter" />

    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager" />
        <property name="arguments" ref="securityManager" />
    </bean>


    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher"
          class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5" />
        <property name="hashIterations" value="2" />
    </bean>

    <!-- 缓存管理器 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:config/ehcache-shiro.xml"/>
    </bean>

    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- session的失效时长，单位毫秒 -->
        <property name="globalSessionTimeout" value="600000"/>
        <!-- 删除失效的session -->
        <property name="deleteInvalidSessions" value="true"/>
    </bean>

</beans>